// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_define.txt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pbuf.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* pbuf_head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbuf_head_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbuf_body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbuf_body_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobuf_5fdefine_2etxt() {
  protobuf_AddDesc_protobuf_5fdefine_2etxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobuf_define.txt");
  GOOGLE_CHECK(file != NULL);
  pbuf_head_descriptor_ = file->message_type(0);
  static const int pbuf_head_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_head, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_head, type_),
  };
  pbuf_head_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbuf_head_descriptor_,
      pbuf_head::default_instance_,
      pbuf_head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_head, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbuf_head));
  pbuf_body_descriptor_ = file->message_type(1);
  static const int pbuf_body_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_body, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_body, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_body, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_body, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_body, binary_),
  };
  pbuf_body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbuf_body_descriptor_,
      pbuf_body::default_instance_,
      pbuf_body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbuf_body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbuf_body));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobuf_5fdefine_2etxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbuf_head_descriptor_, &pbuf_head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbuf_body_descriptor_, &pbuf_body::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobuf_5fdefine_2etxt() {
  delete pbuf_head::default_instance_;
  delete pbuf_head_reflection_;
  delete pbuf_body::default_instance_;
  delete pbuf_body_reflection_;
}

void protobuf_AddDesc_protobuf_5fdefine_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023protobuf_define.txt\")\n\tpbuf_head\022\016\n\006le"
    "ngth\030\001 \002(\007\022\014\n\004type\030\002 \002(\007\"W\n\tpbuf_body\022\016\n"
    "\006length\030\001 \002(\r\022\014\n\004type\030\002 \001(\r\022\017\n\007reserve\030\003"
    " \001(\r\022\013\n\003str\030\004 \001(\t\022\016\n\006binary\030\005 \001(\014", 153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf_define.txt", &protobuf_RegisterTypes);
  pbuf_head::default_instance_ = new pbuf_head();
  pbuf_body::default_instance_ = new pbuf_body();
  pbuf_head::default_instance_->InitAsDefaultInstance();
  pbuf_body::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobuf_5fdefine_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobuf_5fdefine_2etxt {
  StaticDescriptorInitializer_protobuf_5fdefine_2etxt() {
    protobuf_AddDesc_protobuf_5fdefine_2etxt();
  }
} static_descriptor_initializer_protobuf_5fdefine_2etxt_;

// ===================================================================

#ifndef _MSC_VER
const int pbuf_head::kLengthFieldNumber;
const int pbuf_head::kTypeFieldNumber;
#endif  // !_MSC_VER

pbuf_head::pbuf_head()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbuf_head)
}

void pbuf_head::InitAsDefaultInstance() {
}

pbuf_head::pbuf_head(const pbuf_head& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbuf_head)
}

void pbuf_head::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbuf_head::~pbuf_head() {
  // @@protoc_insertion_point(destructor:pbuf_head)
  SharedDtor();
}

void pbuf_head::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbuf_head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbuf_head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbuf_head_descriptor_;
}

const pbuf_head& pbuf_head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fdefine_2etxt();
  return *default_instance_;
}

pbuf_head* pbuf_head::default_instance_ = NULL;

pbuf_head* pbuf_head::New() const {
  return new pbuf_head;
}

void pbuf_head::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pbuf_head*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(length_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbuf_head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbuf_head)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 length = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_type;
        break;
      }

      // required fixed32 type = 2;
      case 2: {
        if (tag == 21) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbuf_head)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbuf_head)
  return false;
#undef DO_
}

void pbuf_head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbuf_head)
  // required fixed32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->length(), output);
  }

  // required fixed32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbuf_head)
}

::google::protobuf::uint8* pbuf_head::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbuf_head)
  // required fixed32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->length(), target);
  }

  // required fixed32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbuf_head)
  return target;
}

int pbuf_head::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 length = 1;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // required fixed32 type = 2;
    if (has_type()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbuf_head::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbuf_head* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbuf_head*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbuf_head::MergeFrom(const pbuf_head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbuf_head::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbuf_head::CopyFrom(const pbuf_head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbuf_head::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pbuf_head::Swap(pbuf_head* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbuf_head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbuf_head_descriptor_;
  metadata.reflection = pbuf_head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbuf_body::kLengthFieldNumber;
const int pbuf_body::kTypeFieldNumber;
const int pbuf_body::kReserveFieldNumber;
const int pbuf_body::kStrFieldNumber;
const int pbuf_body::kBinaryFieldNumber;
#endif  // !_MSC_VER

pbuf_body::pbuf_body()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbuf_body)
}

void pbuf_body::InitAsDefaultInstance() {
}

pbuf_body::pbuf_body(const pbuf_body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbuf_body)
}

void pbuf_body::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  length_ = 0u;
  type_ = 0u;
  reserve_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbuf_body::~pbuf_body() {
  // @@protoc_insertion_point(destructor:pbuf_body)
  SharedDtor();
}

void pbuf_body::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete binary_;
  }
  if (this != default_instance_) {
  }
}

void pbuf_body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbuf_body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbuf_body_descriptor_;
}

const pbuf_body& pbuf_body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fdefine_2etxt();
  return *default_instance_;
}

pbuf_body* pbuf_body::default_instance_ = NULL;

pbuf_body* pbuf_body::New() const {
  return new pbuf_body;
}

void pbuf_body::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pbuf_body*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(length_, type_);
    reserve_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        binary_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbuf_body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbuf_body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reserve;
        break;
      }

      // optional uint32 reserve = 3;
      case 3: {
        if (tag == 24) {
         parse_reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }

      // optional string str = 4;
      case 4: {
        if (tag == 34) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_binary;
        break;
      }

      // optional bytes binary = 5;
      case 5: {
        if (tag == 42) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbuf_body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbuf_body)
  return false;
#undef DO_
}

void pbuf_body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbuf_body)
  // required uint32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->length(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 reserve = 3;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reserve(), output);
  }

  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str(), output);
  }

  // optional bytes binary = 5;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->binary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbuf_body)
}

::google::protobuf::uint8* pbuf_body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbuf_body)
  // required uint32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->length(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 reserve = 3;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reserve(), target);
  }

  // optional string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }

  // optional bytes binary = 5;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->binary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbuf_body)
  return target;
}

int pbuf_body::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 reserve = 3;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserve());
    }

    // optional string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional bytes binary = 5;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbuf_body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbuf_body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbuf_body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbuf_body::MergeFrom(const pbuf_body& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_binary()) {
      set_binary(from.binary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbuf_body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbuf_body::CopyFrom(const pbuf_body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbuf_body::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pbuf_body::Swap(pbuf_body* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(type_, other->type_);
    std::swap(reserve_, other->reserve_);
    std::swap(str_, other->str_);
    std::swap(binary_, other->binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbuf_body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbuf_body_descriptor_;
  metadata.reflection = pbuf_body_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
