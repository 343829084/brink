// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pbuf.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_pbuf_2eproto() {
  delete pbuf_head::default_instance_;
  delete pbuf_body::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_pbuf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_pbuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  pbuf_head::default_instance_ = new pbuf_head();
  pbuf_body::default_instance_ = new pbuf_body();
  pbuf_head::default_instance_->InitAsDefaultInstance();
  pbuf_body::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pbuf_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pbuf_2eproto_once_);
void protobuf_AddDesc_pbuf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pbuf_2eproto_once_,
                 &protobuf_AddDesc_pbuf_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pbuf_2eproto {
  StaticDescriptorInitializer_pbuf_2eproto() {
    protobuf_AddDesc_pbuf_2eproto();
  }
} static_descriptor_initializer_pbuf_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int pbuf_head::kTypeFieldNumber;
const int pbuf_head::kBodyLengthFieldNumber;
#endif  // !_MSC_VER

pbuf_head::pbuf_head()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbuf_head)
}

void pbuf_head::InitAsDefaultInstance() {
}

pbuf_head::pbuf_head(const pbuf_head& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbuf_head)
}

void pbuf_head::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  body_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbuf_head::~pbuf_head() {
  // @@protoc_insertion_point(destructor:pbuf_head)
  SharedDtor();
}

void pbuf_head::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void pbuf_head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const pbuf_head& pbuf_head::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pbuf_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pbuf_2eproto();
#endif
  return *default_instance_;
}

pbuf_head* pbuf_head::default_instance_ = NULL;

pbuf_head* pbuf_head::New() const {
  return new pbuf_head;
}

void pbuf_head::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pbuf_head*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, body_length_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool pbuf_head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:pbuf_head)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 type = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_body_length;
        break;
      }

      // required fixed32 body_length = 2;
      case 2: {
        if (tag == 21) {
         parse_body_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &body_length_)));
          set_has_body_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbuf_head)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbuf_head)
  return false;
#undef DO_
}

void pbuf_head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbuf_head)
  // required fixed32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->type(), output);
  }

  // required fixed32 body_length = 2;
  if (has_body_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->body_length(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:pbuf_head)
}

int pbuf_head::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 type = 1;
    if (has_type()) {
      total_size += 1 + 4;
    }

    // required fixed32 body_length = 2;
    if (has_body_length()) {
      total_size += 1 + 4;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbuf_head::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const pbuf_head*>(&from));
}

void pbuf_head::MergeFrom(const pbuf_head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_body_length()) {
      set_body_length(from.body_length());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void pbuf_head::CopyFrom(const pbuf_head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbuf_head::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pbuf_head::Swap(pbuf_head* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(body_length_, other->body_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string pbuf_head::GetTypeName() const {
  return "pbuf_head";
}


// ===================================================================

#ifndef _MSC_VER
const int pbuf_body::kReserveFieldNumber;
const int pbuf_body::kDataFieldNumber;
const int pbuf_body::kBinaryFieldNumber;
const int pbuf_body::kBinaryLengthFieldNumber;
#endif  // !_MSC_VER

pbuf_body::pbuf_body()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbuf_body)
}

void pbuf_body::InitAsDefaultInstance() {
}

pbuf_body::pbuf_body(const pbuf_body& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbuf_body)
}

void pbuf_body::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reserve_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbuf_body::~pbuf_body() {
  // @@protoc_insertion_point(destructor:pbuf_body)
  SharedDtor();
}

void pbuf_body::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete binary_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void pbuf_body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const pbuf_body& pbuf_body::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pbuf_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pbuf_2eproto();
#endif
  return *default_instance_;
}

pbuf_body* pbuf_body::default_instance_ = NULL;

pbuf_body* pbuf_body::New() const {
  return new pbuf_body;
}

void pbuf_body::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pbuf_body*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(reserve_, binary_length_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        binary_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool pbuf_body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:pbuf_body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_binary;
        break;
      }

      // optional bytes binary = 3;
      case 3: {
        if (tag == 26) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_binary_length;
        break;
      }

      // optional uint32 binary_length = 4;
      case 4: {
        if (tag == 32) {
         parse_binary_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binary_length_)));
          set_has_binary_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbuf_body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbuf_body)
  return false;
#undef DO_
}

void pbuf_body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbuf_body)
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // optional bytes binary = 3;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->binary(), output);
  }

  // optional uint32 binary_length = 4;
  if (has_binary_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->binary_length(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:pbuf_body)
}

int pbuf_body::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional bytes binary = 3;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional uint32 binary_length = 4;
    if (has_binary_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binary_length());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbuf_body::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const pbuf_body*>(&from));
}

void pbuf_body::MergeFrom(const pbuf_body& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_binary_length()) {
      set_binary_length(from.binary_length());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void pbuf_body::CopyFrom(const pbuf_body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbuf_body::IsInitialized() const {

  return true;
}

void pbuf_body::Swap(pbuf_body* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(data_, other->data_);
    std::swap(binary_, other->binary_);
    std::swap(binary_length_, other->binary_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string pbuf_body::GetTypeName() const {
  return "pbuf_body";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
